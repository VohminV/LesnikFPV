import sys
import cv2
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QFileDialog, QHBoxLayout, QVBoxLayout, QWidget, QSlider
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from ultralytics import YOLO
import torch

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO
model = YOLO('best.pt')  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å yolov8s.pt –∏ —Ç.–¥.
model.to(device)


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(QImage, str)  # –°–∏–≥–Ω–∞–ª: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + —Ç–µ–∫—Å—Ç (FPS)

    def __init__(self):
        super().__init__()
        self.running = False
        self.video_path = None

    def run(self):
        self.running = True
        cap = cv2.VideoCapture(self.video_path)
        if not cap.isOpened():
            self.change_pixmap_signal.emit(QImage(), "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ.")
            return

        fps_counter = 0
        start_time = cv2.getTickCount()

        while self.running:
            ret, frame = cap.read()
            if not ret:
                self.change_pixmap_signal.emit(QImage(), "–í–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                self.stop()
                break

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–¥—Ä–∞ –¥–æ 640x640
            frame_resized = cv2.resize(frame, (640, 640))

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
            results = model(frame_resized, verbose=False)
            annotated_frame = results[0].plot()  # –†–∏—Å—É–µ–º bounding box'—ã

            # –ü–æ–¥—Å—á—ë—Ç FPS
            fps_counter += 1
            if fps_counter % 30 == 0:
                current = cv2.getTickCount()
                time_elapsed = (current - start_time) / cv2.getTickFrequency()
                fps = fps_counter / time_elapsed
                fps_text = f"FPS: {fps:.1f}"
            else:
                fps_text = f"FPS: {fps_counter / ((cv2.getTickCount() - start_time) / cv2.getTickFrequency()):.1f}"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OpenCV -> QImage
            rgb_image = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
            h, w, ch = rgb_image.shape
            bytes_per_line = ch * w
            qt_image = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
            scaled_image = qt_image.scaled(640, 640, Qt.KeepAspectRatio, Qt.SmoothTransformation)

            self.change_pixmap_signal.emit(scaled_image, fps_text)

        cap.release()

    def stop(self):
        self.running = False
        self.wait()


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("YOLOv8 –í–∏–¥–µ–æ –ê–Ω–∞–ª–∏–∑ —Å GUI (PyQt5)")
        self.setGeometry(100, 100, 800, 700)
        self.setStyleSheet("background-color: #2c3e50; color: white;")

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.video_label = QLabel("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∏–¥–µ–æ", self)
        self.video_label.setAlignment(Qt.AlignCenter)
        self.video_label.setMinimumSize(640, 640)
        self.video_label.setStyleSheet("QLabel { background-color: #34495e; border: 1px solid #95a5a6; }")

        self.fps_label = QLabel("FPS: ‚Äî", self)
        self.fps_label.setStyleSheet("font-size: 16px; font-weight: bold;")

        self.btn_open = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ", self)
        self.btn_open.setStyleSheet(self.button_style())
        self.btn_open.clicked.connect(self.open_file)

        self.btn_toggle = QPushButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", self)
        self.btn_toggle.setStyleSheet(self.button_style())
        self.btn_toggle.clicked.connect(self.toggle_playback)
        self.btn_toggle.setEnabled(False)

        # –ú–∞–∫–µ—Ç
        control_layout = QHBoxLayout()
        control_layout.addWidget(self.btn_open)
        control_layout.addWidget(self.btn_toggle)

        layout = QVBoxLayout()
        layout.addWidget(self.video_label)
        layout.addWidget(self.fps_label)
        layout.addLayout(control_layout)

        central_widget.setLayout(layout)

        # –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        self.thread = VideoThread()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        self.thread.change_pixmap_signal.connect(self.update_image)

    def button_style(self):
        return """
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #1f618d;
            }
        """

    def open_file(self):
        filename, _ = QFileDialog.getOpenFileName(self, "–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ", "", "–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã (*.mp4 *.avi *.mov *.mkv)")
        if filename:
            self.thread.video_path = filename
            self.btn_toggle.setEnabled(True)
            self.video_label.setText(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:\n{filename.split('/')[-1]}")

    def toggle_playback(self):
        if self.thread.running:
            self.thread.stop()
            self.btn_toggle.setText("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
        else:
            self.thread.start()
            self.btn_toggle.setText("‚èπ –°—Ç–æ–ø")

    def update_image(self, qt_image, fps_text):
        if qt_image.isNull():
            self.video_label.setText(fps_text)
        else:
            self.video_label.setPixmap(QPixmap.fromImage(qt_image))
        self.fps_label.setText(fps_text)


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())